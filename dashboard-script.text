<script>
  $(function () {
      let areaChartOptions = {
          //Boolean - If we should show the scale at all
          showScale: true,
          //Boolean - Whether grid lines are shown across the chart
          scaleShowGridLines: false,
          //String - Colour of the grid lines
//          scaleGridLineColor: "rgba(0,0,0,.05)",
          //Number - Width of the grid lines
          scaleGridLineWidth: 1,
          //Boolean - Whether to show horizontal lines (except X axis)
          scaleShowHorizontalLines: true,
          //Boolean - Whether to show vertical lines (except Y axis)
          scaleShowVerticalLines: true,
          //Boolean - Whether the line is curved between points
          bezierCurve: true,
          //Number - Tension of the bezier curve between points
          bezierCurveTension: 0.3,
          //Boolean - Whether to show a dot for each point
          pointDot: true,
          //Number - Radius of each point dot in pixels
          pointDotRadius: 4,
          //Number - Pixel width of point dot stroke
          pointDotStrokeWidth: 1,
          //Number - amount extra to add to the radius to cater for hit detection outside the drawn point
          pointHitDetectionRadius: 20,
          //Boolean - Whether to show a stroke for datasets
          datasetStroke: true,
          //Number - Pixel width of dataset stroke
          datasetStrokeWidth: 2,
          //Boolean - Whether to fill the dataset with a color
          datasetFill: true,
          //String - A legend template
          legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].lineColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>",
          //Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
          maintainAspectRatio: true,
          //Boolean - whether to make the chart responsive to window resizing
          responsive: true,
          scaleLabel: function(label){return  '$' + label.value}
      };

      //=== BAR CHART: ATTENDANCE CHART
      let attendanceData = {
          labels: ["KG", "Grade 1", "Grade 2", "Grade 3", "Grade 4", "Grade 5", "Grade 6", "Grade 7", "Grade 8"],
          datasets: [
              {
                  label: 'Last Week',
                  data: [15, 18, 25, 18, 12, 18, 16, 18, 20],
                  fillColor: "#ced4da",
                  strokeColor: "#ced4da",
                  pointColor: "#ced4da",
              },
              {
                  label: 'This Week',
                  data: [13, 17, 23, 20, 13, 18, 15, 16, 18],
                  fillColor: "#00a65a",
                  strokeColor: "#00a65a",
                  pointColor: "#00a65a",
              }
          ]
      };
      let barChartOptions = {
          //Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value
          scaleBeginAtZero: true,
          //Boolean - Whether grid lines are shown across the chart
          scaleShowGridLines: true,
          //String - Colour of the grid lines
          scaleGridLineColor: "rgba(0,0,0,.05)",
          //Number - Width of the grid lines
          scaleGridLineWidth: 1,
          //Boolean - Whether to show horizontal lines (except X axis)
          scaleShowHorizontalLines: true,
          //Boolean - Whether to show vertical lines (except Y axis)
          scaleShowVerticalLines: true,
          //Boolean - If there is a stroke on each bar
          barShowStroke: true,
          //Number - Pixel width of the bar stroke
          barStrokeWidth: 2,
          //Number - Spacing between each of the X value sets
          barValueSpacing: 10,
          //Number - Spacing between data sets within X values
          barDatasetSpacing: 1,
          //String - A legend template
          legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].fillColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>",
          //Boolean - whether to make the chart responsive
          responsive: true,
          maintainAspectRatio: true
      };
      barChartOptions.datasetFill = false;
      if($("#attendance-chart").length>0){
          let attendanceChartCanvas = $("#attendance-chart").get(0).getContext("2d");
          let attendanceChart = new Chart(attendanceChartCanvas);
          attendanceChart.Bar(attendanceData, barChartOptions);
      }

      //=== AREA CHART: PAYMENT CHART
      let paymentData = {
          labels: ['March', 'April', 'May', 'Jun', 'July', 'August', 'September', 'October'],
          datasets: [
              {
                  label: "Digital Goods",
                  fillColor: "rgba(60,141,188,0.9)",
                  strokeColor: "rgba(60,141,188,0.8)",
                  pointColor: "#3b8bba",
                  pointStrokeColor: "rgba(60,141,188,1)",
                  pointHighlightFill: "#fff",
                  pointHighlightStroke: "rgba(60,141,188,1)",
                  data: [400, 500, 700, 500, 700, 600, 700, 800]
              }
          ]
      };
      if($("#paymentChart").length>0){
          let paymentChartCanvas = $("#paymentChart").get(0).getContext("2d");
          let paymentChart = new Chart(paymentChartCanvas);
          areaChartOptions.scales = false;
          paymentChart.Line(paymentData, areaChartOptions);
      }

      //=== AREA CHART: EVENT PAYMENT CHART
      let ticketSaleData = {
          labels: ['Oct. 05', 'Oct. 06', 'Oct. 07', 'Oct. 08', 'Oct. 09', 'Oct. 10', 'Oct. 11'],
          datasets: [
              {
                  label: "Digital Goods",
                  fillColor: "rgba(60,141,188,0.9)",
                  strokeColor: "rgba(60,141,188,0.8)",
                  pointColor: "#3b8bba",
                  pointStrokeColor: "rgba(60,141,188,1)",
                  pointHighlightFill: "#fff",
                  pointHighlightStroke: "rgba(60,141,188,1)",
                  data: [500, 600, 550, 600, 500, 500, 650]
              }
          ]
      };
      if($("#ticket-sale-report").length>0){
          let ticketSaleCanvas = $("#ticket-sale-report").get(0).getContext("2d");
          let ticketSaleChart = new Chart(ticketSaleCanvas);
          areaChartOptions.scales = false;
          ticketSaleChart.Line(ticketSaleData, areaChartOptions);
      }

      //=== BAR CHART: REGISTRATION CHART
      let registrantData = {
          labels: ["KG", "Grade 1", "Grade 2", "Grade 3", "Grade 4", "Grade 5", "Grade 6", "Grade 7", "Grade 8"],
          datasets: [
              {
                  label: 'Total Registered',
                  data: [13, 17, 23, 20, 13, 18, 15, 16, 18],
                  fillColor: "#00a65a",
                  strokeColor: "#00a65a",
                  pointColor: "#00a65a",
              }
          ]
      };
      if($('#registration-chart').length>0){
          let registrantChartCanvas = $('#registration-chart').get(0).getContext('2d');
          let registrantChart = new Chart(registrantChartCanvas);
          registrantChart.Bar(registrantData, barChartOptions);
      }

      //=== BAR CHART: REGISTRATION CHART
      ticketSaleData = {
          labels: ["Oct. 05", "Oct. 06", "Oct. 07", "Oct. 08", "Oct. 09", "Oct. 010", "Oct. 11"],
          datasets: [
              {
                  label: 'Total Registered',
                  data: [400, 300, 200, 500, 400, 350, 700],
                  fillColor: "#00a65a",
                  strokeColor: "#00a65a",
                  pointColor: "#00a65a",
              }
          ]
      };
      if($('#ticket-sale-bar-chart').length>0){
          let ticketSaleCanvas = $('#ticket-sale-bar-chart').get(0).getContext('2d');
          let ticketSaleBarChart = new Chart(ticketSaleCanvas);
          barChartOptions.scaleLabel = function(label){return  '$' + label.value};
          ticketSaleBarChart.Bar(ticketSaleData, barChartOptions);
      }

      //=== PIE CHART: PAYMENT REPORT CHART
      if($("#registrationPaymentChart").length>0){
          let pieChartCanvas = $("#registrationPaymentChart").get(0).getContext("2d");
          let pieChart = new Chart(pieChartCanvas);
          let PieData = [
              {
                  value: 2000,
                  color: "#f56954",
                  highlight: "#f56954",
                  label: "Outstanding Payment"
              },
              {
                  value: 4500,
                  color: "#00a65a",
                  highlight: "#00a65a",
                  label: "Total Paid"
              }
          ];
          let pieOptions = {
              //Boolean - Whether we should show a stroke on each segment
              segmentShowStroke: true,
              //String - The colour of each segment stroke
              segmentStrokeColor: "#fff",
              //Number - The width of each segment stroke
              segmentStrokeWidth: 2,
              //Number - The percentage of the chart that we cut out of the middle
              percentageInnerCutout: 50, // This is 0 for Pie charts
              //Number - Amount of animation steps
              animationSteps: 100,
              //String - Animation easing effect
              animationEasing: "easeOutBounce",
              //Boolean - Whether we animate the rotation of the Doughnut
              animateRotate: true,
              //Boolean - Whether we animate scaling the Doughnut from the centre
              animateScale: false,
              //Boolean - whether to make the chart responsive to window resizing
              responsive: true,
              // Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
              maintainAspectRatio: true,
              //String - A legend template
              legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<segments.length; i++){%><li><span style=\"background-color:<%=segments[i].fillColor%>\"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>"
          };
          pieChart.Doughnut(PieData, pieOptions);
      }

      //=== PIE CHART: DONATION REPORT
      if($("#donation-report-pie-chart").length>0){
          let donationPieChartCanvas = $("#donation-report-pie-chart").get(0).getContext("2d");
          let donationPieChart = new Chart(donationPieChartCanvas);
          let DonationPieData = [
              {
                  value: 8000,
                  color: "#f56954",
                  highlight: "#f56954",
                  label: "Pledges"
              },
              {
                  value: 4500,
                  color: "#00a65a",
                  highlight: "#00a65a",
                  label: "Donations"
              }
          ];
          let donationPieOptions = {
              //Boolean - Whether we should show a stroke on each segment
              segmentShowStroke: true,
              //String - The colour of each segment stroke
              segmentStrokeColor: "#fff",
              //Number - The width of each segment stroke
              segmentStrokeWidth: 2,
              //Number - The percentage of the chart that we cut out of the middle
              percentageInnerCutout: 50, // This is 0 for Pie charts
              //Number - Amount of animation steps
              animationSteps: 100,
              //String - Animation easing effect
              animationEasing: "easeOutBounce",
              //Boolean - Whether we animate the rotation of the Doughnut
              animateRotate: true,
              //Boolean - Whether we animate scaling the Doughnut from the centre
              animateScale: false,
              //Boolean - whether to make the chart responsive to window resizing
              responsive: true,
              // Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
              maintainAspectRatio: true,
              //String - A legend template
              legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<segments.length; i++){%><li><span style=\"background-color:<%=segments[i].fillColor%>\"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>"
          };
          donationPieChart.Doughnut(DonationPieData, donationPieOptions);
      }
  });
</script>